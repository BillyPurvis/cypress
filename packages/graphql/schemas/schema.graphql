### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""Namespace for information related to the app"""
type App {
  """Active project"""
  activeProject: Project

  """Browsers found that are compatible with Cypress"""
  browsers: [Browser!]!

  """Whether this is the first open of the application or not"""
  isFirstOpen: Boolean!

  """All known projects for the app"""
  projects: [Project!]!
}

"""Container representing a browser"""
type Browser {
  channel: String!
  displayName: String!
  family: BrowserFamily!
  majorVersion: String
  name: String!
  path: String!
  version: String!
}

enum BrowserFamily {
  chromium
  firefox
}

"""Cloud"""
interface CloudEdge {
  node: Node!
}

"""
A CloudOrganization represents an Organization stored in the Cypress Cloud
"""
type CloudOrganization implements Node {
  """Globally unique identifier representing a concrete GraphQL ObjectType"""
  id: ID!

  """Name of the organization"""
  name: String
}

"""A CloudProject represents a Project stored in the Cypress Cloud"""
type CloudProject implements Node {
  """Globally unique identifier representing a concrete GraphQL ObjectType"""
  id: ID!

  """The organization the project is a member of"""
  organization: CloudOrganization
  runs(after: Int, before: Int, first: Int, last: Int): CloudRunConnection

  """Unique identifier for a Project"""
  slug: String!
}

"""A Connection adhering to the Relay Specification"""
type CloudProjectConnection {
  """Auto-generated by nexus-decorators as the objectType is missing fields"""
  todo: Boolean
}

type CloudProjectEdge {
  """Auto-generated by nexus-decorators as the objectType is missing fields"""
  todo: Boolean
}

type CloudRecordKey implements Node {
  """Globally unique identifier representing a concrete GraphQL ObjectType"""
  id: ID!
}

"""A Recorded run of the Test Runner, typically to the cloud"""
type CloudRun implements Node {
  commitInfo: CloudRunCommitInfo
  createdAt: Date

  """Globally unique identifier representing a concrete GraphQL ObjectType"""
  id: ID!
  status: CloudRunStatus

  """
  Total duration of the run in milliseconds, accounting for any parallelization
  """
  totalDuration: Int

  """This is the number of failed tests across all groups in the run"""
  totalFailed: Int

  """This is the number of passed tests across all groups in the run"""
  totalPassed: Int

  """This is the number of pending tests across all groups in the run"""
  totalPending: Int

  """This is the number of running tests across all groups in the run"""
  totalRunning: Int

  """This is the number of skipped tests across all groups in the run"""
  totalSkipped: Int

  """This is the number of tests across all groups in the run"""
  totalTests: Int
}

type CloudRunCommitInfo {
  authorAvatar: String
  authorEmail: String
  authorName: String
  branch: String
  branchUrl: String
  message(
    """Number of characters to truncate the commit message to"""
    truncate: Int
  ): String
  sha: String
  summary: String
  url: String
}

type CloudRunConnection {
  edges: [CloudRunEdge]
  nodes: [CloudRun]
  pageInfo: PageInfo!
}

type CloudRunEdge {
  cursor: String
  node: CloudRun
}

"""Possible check status of the test run"""
enum CloudRunStatus {
  CANCELLED
  ERRORED
  FAILED
  NOTESTS
  OVERLIMIT
  PASSED
  RUNNING
  TIMEDOUT
}

"""A CloudUser represents an User stored in the Cypress Cloud"""
type CloudUser implements Node {
  email: String

  """The display name of the user, if we have one"""
  fullName: String

  """Globally unique identifier representing a concrete GraphQL ObjectType"""
  id: ID!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum FrontendFramework {
  cra
  nextjs
  nuxtjs
  react
  vue
  vuecli
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  """Create a Cypress config file for a new project"""
  appCreateConfigFile(code: String!, configFilename: String!): App

  """
  Initializes open_project global singleton to manager current project state
  """
  initializeOpenProject(testingType: TestingTypeEnum!): App

  """Launches project from open_project global singleton"""
  launchOpenProject(testingType: TestingTypeEnum!): App

  """Auth with Cypress Cloud"""
  login: Query

  """Log out of Cypress Cloud"""
  logout: Query

  """Set the current navigation item"""
  navigationMenuSetItem(type: NavItem!): NavigationMenu

  """Installs the dependencies for the component testing step"""
  wizardInstallDependencies: Wizard

  """Navigates backward in the wizard"""
  wizardNavigate(direction: WizardNavigateDirection!): Wizard

  """Navigates forward in the wizard"""
  wizardNavigateForward: Wizard

  """Sets the frontend bundler we want to use for the project"""
  wizardSetBundler(bundler: SupportedBundlers!): Wizard

  """Sets the frontend framework we want to use for the project"""
  wizardSetFramework(framework: FrontendFramework!): Wizard

  """Sets the frontend bundler we want to use for the project"""
  wizardSetManualInstall(isManual: Boolean!): Wizard

  """Sets the current testing type we want to use"""
  wizardSetTestingType(type: TestingTypeEnum!): Wizard

  """Validates that the manual install has occurred properly"""
  wizardValidateManualInstall: Wizard
}

enum NavItem {
  learn
  projectSetup
  runs
  settings
}

"""Container describing a single nav item"""
type NavigationItem {
  iconPath: String!
  id: NavItem!
  name: String!
  selected: Boolean!
}

"""Container for state associated with the side navigation menu"""
type NavigationMenu {
  items: [NavigationItem]!
  selected: NavItem!
}

"""Implements the Relay Node spec"""
interface Node {
  """Globally unique identifier representing a concrete GraphQL ObjectType"""
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

enum PluginsState {
  error
  initialized
  initializing
  uninitialized
}

"""A Cypress project is a container"""
type Project {
  cloudProject: CloudProject
  id: ID!

  """Used to associate project with Cypress cloud"""
  projectId: String
  projectRoot: String!
  resolvedConfig: ResolvedConfig
  title: String!
}

"""The root "Query" type containing all entry fields for our querying"""
type Query {
  app: App!

  """Lookup an individual project by the slug"""
  cloudProject: CloudProject
  cloudProjectsByIds: [CloudProject]

  """Metadata about the nagivation menu"""
  navigationMenu: NavigationMenu

  """A user within the Cypress Cloud"""
  viewer: CloudUser

  """Metadata about the wizard, null if we arent showing the wizard"""
  wizard: Wizard
}

type ResolvedBooleanOption implements ResolvedOptionBase {
  from: ResolvedConfigOption
  type: ResolvedType!
  value: Boolean
}

"""Resolve config for a project"""
type ResolvedConfig {
  animationDistanceThreshold: ResolvedNumberOption
  baseUrl: ResolvedStringOption
  blockHosts: ResolvedStringOption
  chromeWebSecurity: ResolvedBooleanOption
  componentFolder: ResolvedStringOption
  defaultCommandTimeout: ResolvedNumberOption
  downloadsFolder: ResolvedStringOption
  env: ResolvedJsonOption
  execTimeout: ResolvedNumberOption
  experimentalFetchPolyfill: ResolvedBooleanOption
  experimentalInteractiveRunEvents: ResolvedBooleanOption
  experimentalSessionSupport: ResolvedBooleanOption
  experimentalSourceRewriting: ResolvedBooleanOption
  experimentalStudio: ResolvedBooleanOption
  fileServerFolder: ResolvedStringOption
  fixturesFolder: ResolvedStringOption
  ignoreTestFiles: ResolvedStringListOption
  includeShadowDom: ResolvedBooleanOption
  integrationFolder: ResolvedStringOption
  nodeVersion: ResolvedStringOption
  numTestsKeptInMemory: ResolvedNumberOption
  pageLoadTimeout: ResolvedNumberOption
  pluginsFile: ResolvedStringOption
  port: ResolvedNumberOption
  projectId: ResolvedStringOption
  redirectionLimit: ResolvedNumberOption
  reporter: ResolvedStringOption
  requestTimeout: ResolvedNumberOption
  resolvedNodePath: ResolvedStringOption
  resolvedNodeVersion: ResolvedStringOption
  retries: ResolvedNumberOption
  screenshotOnRunFailure: ResolvedBooleanOption
  screenshotsFolder: ResolvedStringOption
  scrollBehavior: ResolvedStringOption
  supportFile: ResolvedStringOption
  supportFolder: ResolvedStringOption
  taskTimeout: ResolvedNumberOption
  testFiles: ResolvedStringOption
  trashAssetsBeforeRuns: ResolvedBooleanOption
  userAgent: ResolvedStringOption
  video: ResolvedBooleanOption
  videoCompression: ResolvedNumberOption
  videoUploadOnPasses: ResolvedBooleanOption
  videosFolder: ResolvedStringOption
  viewportHeight: ResolvedNumberOption
  viewportWidth: ResolvedNumberOption
  waitForAnimations: ResolvedBooleanOption
  watchForFileChanges: ResolvedBooleanOption
}

enum ResolvedConfigOption {
  config
  default
  env
  plugin
  runtime
}

"""
An JSON object represented as a string via JSON.stringify. Useful for representing complex types like `env`
"""
type ResolvedJsonOption implements ResolvedOptionBase {
  from: ResolvedConfigOption
  type: ResolvedType!
  value: String
}

type ResolvedNumberOption implements ResolvedOptionBase {
  from: ResolvedConfigOption
  type: ResolvedType!
  value: String
}

interface ResolvedOptionBase {
  from: ResolvedConfigOption
  type: ResolvedType!
}

type ResolvedStringListOption implements ResolvedOptionBase {
  from: ResolvedConfigOption
  type: ResolvedType!
  value: [String]
}

type ResolvedStringOption implements ResolvedOptionBase {
  from: ResolvedConfigOption
  type: ResolvedType!
  value: String
}

enum ResolvedType {
  array
  boolean
  json
  number
  string
}

"""The bundlers that we can use with Cypress"""
enum SupportedBundlers {
  vite
  webpack
}

enum TestingTypeEnum {
  component
  e2e
}

type TestingTypeInfo {
  description: String
  id: TestingTypeEnum!
  title: String
}

"""
The Wizard is a container for any state associated with initial onboarding to Cypress
"""
type Wizard {
  """All of the bundlers to choose from"""
  allBundlers: [WizardBundler!]!
  bundler: WizardBundler
  canNavigateForward: Boolean!

  """The title of the page, given the current step of the wizard"""
  description: String
  framework: WizardFrontendFramework

  """All of the component testing frameworks to choose from"""
  frameworks: [WizardFrontendFramework!]!

  """Whether we have chosen manual install or not"""
  isManualInstall: Boolean!

  """
  A list of packages to install, null if we have not chosen both a framework and bundler
  """
  packagesToInstall: [WizardNpmPackage!]

  """Configuration file based on bundler and framework of choice"""
  sampleCode(lang: WizardCodeLanguage! = js): String
  step: WizardStep!

  """
  The testing type we are setting in the wizard, null if this has not been chosen
  """
  testingType: TestingTypeEnum
  testingTypes: [TestingTypeInfo!]

  """The title of the page, given the current step of the wizard"""
  title: String
}

"""Wizard bundler"""
type WizardBundler {
  id: SupportedBundlers!

  """Whether this is the selected framework bundler"""
  isSelected: Boolean
  name: String!
  package: String!
}

enum WizardCodeLanguage {
  js
  ts
}

"""A frontend framework that we can setup within the app"""
type WizardFrontendFramework {
  """The name of the framework"""
  id: FrontendFramework!

  """Whether this is the selected framework in the wizard"""
  isSelected: Boolean!

  """The name of the framework"""
  name: String!

  """All of the supported bundlers for this framework"""
  supportedBundlers: [WizardBundler!]!
}

enum WizardNavigateDirection {
  back
  forward
}

"""Details about an NPM Package listed during the wizard install"""
type WizardNpmPackage {
  description: String!

  """The package name that you would npm install"""
  name: String!
}

enum WizardStep {
  createConfig
  installDependencies
  selectFramework
  setupComplete
  welcome
}
